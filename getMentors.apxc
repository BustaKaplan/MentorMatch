public class getMentors {   
    @AuraEnabled
    public static List<hed__Application__c> getMentorRecords(Id recordId){
        hed__Application__c Application = [Select hed__Applying_To__c, Industry__c, Function__c, RecordType.Name FROM hed__Application__c WHERE Id = :recordId];
        
        string resultRecordType = Application.RecordType.Name == 'Mentee' ? 'Mentor' : 'Mentee';
    	
        List<hed__Application__c> appRecords = [SELECT hed__Applicant__r.Name, Industry__c,Match_Score__c, Function__c FROM hed__Application__c WHERE hed__Applying_To__c = :Application.hed__Applying_To__c AND recordType.Name = :resultRecordType ];
 
        Integer matchScore = null;
        hed__Application__c applicationData = new hed__Application__c();
        
        for(hed__Application__c appRecord:appRecords){  
            matchScore = 0;
            if (appRecord.Industry__c == Application.Industry__c) {
                matchScore = 50 ; 
            } if (appRecord.Function__c == Application.Function__c) {
                matchScore = matchScore + 50;
            }
            appRecord.Match_Score__c = matchScore ;            
        }
       	return appRecords;
        //Add wrapper class for a new field called MatchSchore where Industry = Industry 50% and If Function = Function 50%
    }
	@AuraEnabled
    public static List <Account> getMentorPrograms(){
        return [SELECT Name, Id FROM Account WHERE is_Mentor_Program__c = TRUE];
    }
	@AuraEnabled
    public static List<hed__Application__c> getMentees(Id applyingTo){
        return [SELECT Name, Id FROM hed__Application__c WHERE hed__Applying_To__c = :applyingTo AND RecordType.Name = 'Mentee'];
    }    
     

}
